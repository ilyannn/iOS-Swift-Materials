//: Playground - noun: a place where people can play

//: ## –ß–∏—Å–ª–∞

//: *–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ª–µ–≤–∞ –æ—Ç —ç—Ç–æ–π –Ω–∞–¥–ø–∏—Å–∏ —Å–∏–º–≤–æ–ª—ã —Å–ª—ç—à–∞ –∏ –¥–≤–æ–µ—Ç–æ—á–∏—è, —Ç–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤ –º–µ–Ω—é Editor -> Show Rendered Markup –∏ —É–≤–∏–¥–µ—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç.*

5 + 6

let first = 6
let second = 69

6 * 69
first * second

let –∫—É—Ä—Å‚Ç¨_–∫_—Ä—É–± = 69
100 * –∫—É—Ä—Å‚Ç¨_–∫_—Ä—É–±

first * –∫—É—Ä—Å‚Ç¨_–∫_—Ä—É–±
let iPhone–í‚Ç¨ = 739
let iPhone–í–†—É–± = iPhone–í‚Ç¨ * –∫—É—Ä—Å‚Ç¨_–∫_—Ä—É–±

let —Ü–µ–ª–æ–µ: Int = 10
let –¥—Ä–æ–±–Ω–æ–µ: Double = 10.0

—Ü–µ–ª–æ–µ / 3
let –ø—Ä–∏–≤–µ–¥–µ–Ω–æ = Int(–¥—Ä–æ–±–Ω–æ–µ / 3)

//: –ö–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Swift –∏–º–µ–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —è–≤–Ω–æ. –ö–∞–∫ –∏ –≤–æ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –¥—Ä–æ–±–Ω—ã–π —Ç–∏–ø –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è `Double`.

// –û–¥–∏–Ω —Å–ø–æ—Å–æ–±
let isDouble1 = Double(56)

// –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± 
let isDouble2: Double = 56



let divided = isDouble1 / 10

//: ## –°—Ç—Ä–æ–∫–∏

let someString: String = "—Å—Ç—Ä–æ–∫–∞" + "–¥—Ä—É–≥–∞—è"
someString

"–í—ã—á–∏—Å–ª–∏–º \(iPhone–í‚Ç¨) –µ–≤—Ä–æ = \(iPhone–í–†—É–±) —Ä—É–±"


//: ## –ú–∞—Å—Å–∏–≤—ã

//: –ú–∞—Å—Å–∏–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–º, —Ç–æ –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.

let someArray = [5, 7, 8]
let anotherArray = [2, 8, 9]

someArray + anotherArray

"–ù–∞—à –º–∞—Å—Å–∏–≤ \(someArray)"

let numbers = [55, 23, 98, 33]

//: ## –§—É–Ω–∫—Ü–∏–∏ 

//: –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ `func` –∏ `return`.
//: –ù–∞–¥–æ –∑–Ω–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ —Ç–∏–ø.

let rateUSDtoRUB = 64.74

func fromRUBtoUSD(amount: Double) -> Double {
    return amount / rateUSDtoRUB
}

//: `f(x)` - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–æ—Ç–∞—Ü–∏—è 

fromRUBtoUSD(Double(iPhone–í–†—É–±))

//: x.f() - –æ–±—ä–µ–∫—Ç–Ω–∞—è –Ω–æ—Ç–∞—Ü–∏—è

[57, 31, 6, 8].sort()

someArray.sort()

//: ## Unicode –∏ —Å—Ç—Ä–æ–∫–∏

["—Å—Ç—Ä–æ–∫–∞", "–¥—Ä—É–≥–∞—è"].sort()

"—Å—Ç—Ä–æ–∫–∞"

"caf√©".utf8.count // –í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤ C –µ—Å–ª–∏ —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ char
"caf√©".utf16.count // –í–æ—Ç —Ç–∞–∫ –≤ Objective-C
"caf√©".characters.count // –õ—É—á—à–∏–π –º–µ—Ç–æ–¥ –≤ Swift


//: ## –¢–∏–ø Bool –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ

let —Ä–µ–∑—É–ª—å—Ç–∞—Ç = 15000 < 10000
—Ä–µ–∑—É–ª—å—Ç–∞—Ç

true || false
true && false
true == false

45 == 50 + 6
45 == 40 + 5

"–∞–±–≤" == "–∞" + "–±" + "–≤"

"e" < "√©"
"√©" < "f"

let result = ["cafe", "caff", "caf√©"].sort().reverse()

result
result.count

Array(numbers)
Array(result)


//: ## –û–ø–µ—Ä–∞—Ç–æ—Ä import

import Foundation

let œÄ = M_PI
cos(œÄ/3)

// Array(address.characters)[5]

// address[5]

"üòé".utf16.count
NSString(string: "üòé").length
"üòé".characters.count


//: ## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π

let address = "https://github.com/ilyannn/iOS-Swift-Materials"

let url = NSURL(string: address)

NSURL(fileURLWithPath: "xxx")
NSURL(string: address)

// –ü–∞—Ä–∞–º–µ—Ç—Ä —Å –∏–º–µ–Ω–µ–º y
func add(x: Double, y:Double) -> Double {
    return x + y
}

add(10, y: 20)

func add(x: Double, to y:Double, andMultiply k:Double) -> Double {
    let sum = x + y
    return sum * k
}

add(10, to: 20, andMultiply:  2)
add(5, to: 20, andMultiply:  2)
add(10, to: 30, andMultiply:  10)

// add(10, 20, 2)


func manyParameters(point x: Int, a: Int, b:Int, c: Int) -> Int {
    return a * x * x + b * x + c
}

manyParameters(point:10, a: 1, b: 2, c: 3)

//: ## map

numbers

func —É—Ç—Ä–æ–∏—Ç—å(x: Int) -> Int {
    return x * 3
}

numbers.map(—É—Ç—Ä–æ–∏—Ç—å)



numbers.sort().map(—É—Ç—Ä–æ–∏—Ç—å) == numbers.map(—É—Ç—Ä–æ–∏—Ç—å).sort()

//: ## map –∏ reduce

numbers.reduce(0, combine: +)
numbers.reduce(1, combine: *)

numbers.sort().reduce(0, combine: +)

// –°–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é sum

func sum(array: [Int]) -> Int {
    return array.reduce(0, combine: +)
}

func sum(array: [Double]) -> Double {
    return array.reduce(0, combine: +)
}

func sum(array: [String]) -> String {
    return array.reduce("", combine: +)
}

sum(numbers)
sum(numbers.map(—É—Ç—Ä–æ–∏—Ç—å)) == —É—Ç—Ä–æ–∏—Ç—å(sum(numbers))

sum([4.5, 5.6])

sum(["one", "two", "three"])

//: ## filter


func good(number: Int) -> Bool {
    return number > 50
}

numbers
numbers.filter(good)

numbers.sort().filter(good) == numbers.filter(good).sort()


//: ## nil, if/let, guard/let/else

func –±—Ä–∞—É–∑–µ—Ä(input: String) -> String {
    let url = NSURL(string: input)
    let host = url?.host
    return "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä \(host)"
}

–±—Ä–∞—É–∑–µ—Ä("http://google.com")
–±—Ä–∞—É–∑–µ—Ä("*^&$&*^%*&&")

–±—Ä–∞—É–∑–µ—Ä("http://moscoding.ru/xxx")

func –±—Ä–∞—É–∑–µ—Ä_iflet(input: String) -> String {
    if let url = NSURL(string: input) {
        if let host = url.host {
            return "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä \(host)"
        }
    }
    return "–í—ã –≤–≤–æ–¥–∏—Ç–µ —Ñ–∏–≥–Ω—é"
}

–±—Ä–∞—É–∑–µ—Ä_iflet("http://google.com")
–±—Ä–∞—É–∑–µ—Ä_iflet("*^&$&*^%*&&")
–±—Ä–∞—É–∑–µ—Ä_iflet("http://moscoding.ru/xxx")

func –±—Ä–∞—É–∑–µ—Ä_guardlet(input: String) -> String {
    guard let url = NSURL(string: input) else {
        return "–í—ã –≤–≤–æ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ—Ç–æ—Ä—É—é –Ω–µ–ª—å–∑—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ URL"
    }
    
    guard let host = url.host else {
        return "–¢—É—Ç –Ω–µ—Ç host!"
    }

    guard let path = url.path else {
        return "–¢—É—Ç –Ω–µ—Ç path!"
    }

    guard path != "" else {
        return "–ü—É—Å—Ç–æ–π –ø—É—Ç—å!"
    }
    
    return "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å \(path) –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ \(host)"
}

–±—Ä–∞—É–∑–µ—Ä_guardlet("http://google.com")
–±—Ä–∞—É–∑–µ—Ä_guardlet("*^&$&*^%*&&")
–±—Ä–∞—É–∑–µ—Ä_guardlet("http://moscoding.ru/xxx")


func –±—Ä–∞—É–∑–µ—Ä_optional_param(input: String) -> String {
    let url = NSURL(string: input)
    return –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å_url(url)
}

func –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å_url(url: NSURL?) -> String {
    
    guard let host = url?.host else {
        return "–¢—É—Ç –Ω–µ—Ç host!"
    }

    guard let path = url?.path else {
        return "–¢—É—Ç –Ω–µ—Ç path!"
    }
    
    guard path != "" else {
        return "–ü—É—Å—Ç–æ–π –ø—É—Ç—å!"
    }
    
    return "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å \(path) –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ \(host)"
}


numbers

let numbers_copy = numbers
numbers_copy[1]

//: ## Objective-C bridging

let mutableArray = NSMutableArray()
let sameMutableArray = mutableArray

mutableArray.addObject(10)
mutableArray.addObject("—Å—Ç—Ä–æ–∫–∞")
sameMutableArray.addObject(20)
mutableArray


//: –ò–∑–º–µ–Ω—è–µ–º—ã–µ –º–∞—Å—Å–∏–≤—ã 

var swiftArray: [NSObject] = []
swiftArray.append(10)
swiftArray.append("—Å—Ç—Ä–æ–∫–∞")

var anotherSwiftArray = swiftArray

swiftArray.append(100)
anotherSwiftArray.append(200)

swiftArray
anotherSwiftArray


