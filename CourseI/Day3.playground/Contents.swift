//: Playground - noun: a place where people can play

import Foundation

//: ## –û–ø–µ—Ä–∞—Ü–∏–∏ 

var stuff = 0

let queue1 = NSOperationQueue()
let queue2 = NSOperationQueue()

queue1.qualityOfService = .Default
queue2.qualityOfService = .Background

queue1.addOperationWithBlock {
    sleep(1)
    stuff = 10
}

queue2.addOperationWithBlock {
    sleep(1)
    stuff = 11
}

queue1.waitUntilAllOperationsAreFinished()

stuff

//: ## –°—Ç—Ä–æ–∫–∏ –∏ –ª–µ–Ω–∏–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è

let string = "Hello world"

var string1 = string
var string2 = string

string1 += "!"
string2 += "?"

string.characters.count

let üòé = "üòé"

Array(üòé.characters)
Array(üòé.utf16)

(üòé as NSString).length

Array(üòé.utf8)

üòé + üòé + üòé


Array(string.characters.reverse().reverse())

//: ## –ú–∞—Å—Å–∏–≤—ã –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è

import UIKit

let numbers = [15, 2, 76, 55]

let colors = [UIColor.redColor(), UIColor.blueColor(), UIColor.greenColor()]

func —É–¥–≤–æ–∏—Ç—å(x: Int) -> Int {
    return x * 2
}

func negate(x: Int) -> Int {
    return -x
}

let formatter = NSNumberFormatter()
formatter.numberStyle = .SpellOutStyle

func describe(x:Int) -> String? {
    return formatter.stringFromNumber(x)
}

numbers.map(—É–¥–≤–æ–∏—Ç—å).map(negate)
numbers.map(negate).map(—É–¥–≤–æ–∏—Ç—å).map(describe)

(numbers as [NSNumber]).flatMap(formatter.stringFromNumber)


//: ## –ë—É–ª–µ–≤—Å–∫–∞—è –∞–ª–≥–µ–±—Ä–∞

let integer = 5

true
false

integer + 1
integer * 2

let bool_example:Bool = integer < 3

func —Ö–æ—Ä–æ—à–µ–µ(x: Int) -> Bool {
    return (x < 0) || (x > 10)
}

func —á–µ—Ç–Ω—ã–µ(x: Int) -> Bool {
    return x % 2 == 0
}

func –ø–æ_–º–æ–¥—É–ª—é2(x: Int) -> Int {
    return x % 2
}

Array(1...10).map(–ø–æ_–º–æ–¥—É–ª—é2)

Bool(0)
Bool(100)
Int(true)
Int(false)

—Ö–æ—Ä–æ—à–µ–µ(5)
—Ö–æ—Ä–æ—à–µ–µ(15)

//: ## filter

numbers
numbers.filter(—Ö–æ—Ä–æ—à–µ–µ).filter(—á–µ—Ç–Ω—ã–µ)

func –¥–µ–ª–∏—Ç—Å—è_–Ω–∞_7(x: Int) -> Bool {
    return x % 7 == 0
}

func –¥–µ–ª–∏—Ç—Å—è_–Ω–∞_6(x: Int) -> Bool {
    return x % 6 == 0
}

let test = [6, 7, 8, 14, 20, 21]

test.filter(–¥–µ–ª–∏—Ç—Å—è_–Ω–∞_7).map(—É–¥–≤–æ–∏—Ç—å)
test.map(—É–¥–≤–æ–∏—Ç—å).filter(–¥–µ–ª–∏—Ç—Å—è_–Ω–∞_7)

test.filter(–¥–µ–ª–∏—Ç—Å—è_–Ω–∞_6).map(—É–¥–≤–æ–∏—Ç—å)
test.map(—É–¥–≤–æ–∏—Ç—å).filter(–¥–µ–ª–∏—Ç—Å—è_–Ω–∞_6)


test.reduce(0, combine: +)
test.reduce(1, combine: *)

let names = ["–ò–ª—å—è", "–í–∞—Å—è", "–ü–µ—Ç—è"]

func —Å_–ø—Ä–æ–±–µ–ª–æ–º(x: String, y: String) -> String {
    
    guard x != "" else { return y }
    return x + ", " + y
}

func greet(names: [String]) -> String {
    return "–ü—Ä–∏–≤–µ—Ç: " + names.reduce("", combine: —Å_–ø—Ä–æ–±–µ–ª–æ–º)
}

greet(names + names + names)


