//: [–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: –†–µ—à–µ—Ç–æ](@previous)

//: # –ü–æ–∏—Å–∫–æ–≤–∏–∫

//: –î–æ–ø—É—Å—Ç–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö:

let names = ["–ò–ª—å—è –®", "–ò–ª—å—è –ù", "–ü–µ—Ç—è", "–í–æ–≤–∞", "–û–ª–µ–≥", "–ü–∞–≤–µ–ª", "–í–∞—Å–∏–ª–∏—Å–∞", "–î–∞—Ä—å—è", "–î–∏–º–∞", "–ê—Ä–∫–∞–¥–∏–π", "–ê—Ä–∫–∞–¥–∏–π 16", "–ê—Ä–∫–∞–¥–∏–π 15"]


//: –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å characters view ("–ø–æ—á—Ç–∏ –º–∞—Å—Å–∏–≤")

Array("–°—Ç—Ä–æ–∫–∞".characters)

//: –í–æ—Ç —Ç–∞–∫ –º–æ–∂–Ω–æ –ø–æ–∏—Å–∫–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –≤ –Ω–∞—à–µ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∞–º–æ–º –ø—Ä–æ—Å—Ç–æ–º —Å–ª—É—á–∞–µ.

func –Ω–∞—á–∞–ª–æ–ò(x:String) -> Bool {
    let chars = x.characters
    return chars.first == "–ò"
}

func —Å–µ—Ä–µ–¥–∏–Ω–∞–ï(x:String) -> Bool {
    let chars = x.characters
    return chars[advance(chars.startIndex, 3)] == "–µ"
}

—Å–µ—Ä–µ–¥–∏–Ω–∞–ï(names[0])
—Å–µ—Ä–µ–¥–∏–Ω–∞–ï(names[5])
names.filter(—Å–µ—Ä–µ–¥–∏–Ω–∞–ï)

//: –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å –æ–±—ä–µ–∫—Ç –ø—Ä—è–º–æ –≤ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é `\()`.

func –ø—Ä–∏–≤–µ—Ç(–∏–º—è:String) -> String {
    return "–ü—Ä–∏–≤–µ—Ç, \(–∏–º—è)!"
}

names.map(–ø—Ä–∏–≤–µ—Ç)

", ".join(names)

//: –ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –º–æ–∂–Ω–æ —Å–æ–µ–¥–∏–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π `.join`. –û–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ–º –æ–±—ä–µ–∫—Ç–µ, *–∫–æ—Ç–æ—Ä—ã–π* —Å–æ–µ–¥–∏–Ω—è–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–∞ `", "`. –í–æ–æ–±—â–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤, –Ω–æ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Å—Ç—Ä–æ–∫, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —ç—Ç–æ –ø–æ —Å—É—Ç–∏ –º–∞—Å—Å–∏–≤ –±—É–∫–≤.

func –ø—Ä–∏–≤–µ—Ç(–∏–º–µ–Ω–∞:[String]) -> String {
    let –¥–ª–∏–Ω–Ω–æ–µ = ", ".join(–∏–º–µ–Ω–∞)
    return –ø—Ä–∏–≤–µ—Ç(–¥–ª–∏–Ω–Ω–æ–µ)
}

names.sort().map(–ø—Ä–∏–≤–µ—Ç)

–ø—Ä–∏–≤–µ—Ç(names)
–ø—Ä–∏–≤–µ—Ç(names.sort().reverse())


//: –£ –Ω–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–ª–∏ –ø–æ–ª–Ω—É—é —Ñ–æ—Ä–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫—É—é. –ö–æ—Ä–æ—Ç–∫–∞—è —Ñ–æ—Ä–º–∞ –≤ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è lambda-—Ñ–æ—Ä–º–∞. –í Swift –Ω–µ –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äì –ø—Ä–æ—Å—Ç–æ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏.

// –§—É–Ω–∫—Ü–∏—è lambda —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–∞ –Ω–∞—á–∞–ª–æ–ò

let lambda = { (x:String) in x.characters.first == "–ò" }
names.filter(lambda)

//: –°–∞–º–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–æ—Ä–º–∞ —Ñ—É–Ω–∫—Ü–∏–∏:

names.filter {
    $0.characters.first == "–ò"
}

//:  –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ

names.sort { // –¥–∞, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ
    $0.characters.count < $1.characters.count
}

//:  –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–∏–º–≤–æ–ª—É –≤ —Å—Ç—Ä–æ–∫–µ. –î–≤–∞ –∞–≥—Ä—É–º–µ–Ω—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞–∑—ã–≤–∞—Ç—å $0 –∏ $1

let name = "Something"
name.characters.last

names.sort { // –¥–∞, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ
    $0.characters.last < $1.characters.last
}

//:  –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–∏–º–≤–æ–ª—É –≤ —Å—Ç—Ä–æ–∫–µ –∏ –ø—Ä–∏ —ç—Ç–æ–º case-insensitive

names.sort { // –¥–∞, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ
    $0.lowercaseString.characters.last < $1.lowercaseString.characters.last
}

//:  –ê —Ç–∞–∫ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É

String(name.characters.reverse())

Int("0056")
Double("5.6")


/*: –ü–æ—Å—Ç–∞–≤–∏–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –∑–∞–¥–∞—á—É:
 - –ú—ã –∏—â–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ –∞ –ø–æ –≤—Å–µ–º
 - –ù–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ —Å –ø–æ–∑–∏—Ü–∏–µ–π –±—É–∫–≤—ã, —Ç–æ –µ—Å—Ç—å —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
*/

let —Ä–µ–∑—É–ª—å—Ç–∞—Ç1: (String, Int) = ("–í–∞—Å–∏–ª–∏—Å–∞", 2)
let —Ä–µ–∑—É–ª—å—Ç–∞—Ç_–≤–µ—Å—å: [(String, Int)] = [("–í–∞—Å–∏–ª–∏—Å–∞", 2), ("–í–∞—Å–∏–ª–∏—Å–∞", 8)]



//: ## –ü–æ–∏—Å–∫–æ–≤—ã–π —Ä–æ–±–æ—Ç
// let data = "–í–∞—Å–∏–ª–∏—Å–∞"


func –†–æ–±–æ—Ç–ê(data: String) -> [(String, Int)] {
    return data
        .lowercaseString
        .characters
        .enumerate()
        .map {
            index, char in (char, index)
        }.filter { char, index in
            char == "–∞"
        }.map { char, index in
            (data, index)
        }
}

–†–æ–±–æ—Ç–ê("–ö–∞—Ç—è")
–†–æ–±–æ—Ç–ê("–¢–∞—Ä–∞—Å")
–†–æ–±–æ—Ç–ê("–ê–Ω—è")

//: –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: —Ä–æ–±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ "–µ"

//: –≠—Ç–æ –Ω–µ —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ –∫–∞–∫ –∫–∞–∂–µ—Ç—Å—è: –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –æ—Ç üë∂üèæ –∫ üí™üèæ.


//: `–†–æ–±–æ—Ç("–∞")` —ç—Ç–æ –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è,  `–†–æ–±–æ—Ç("–±")` —ç—Ç–æ –¥—Ä—É–≥–∞—è.

func Robot(–∏—Å–∫–æ–º–∞—è:Character) -> (String -> [(String, Int)]) {
    
    return { –∏–º—è in
     
//: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –º—ã —Å—Ç—Ä–æ–∏–º,  –∏–º–µ–µ—Ç –æ–¥–∏–Ω –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä `–∏–º—è`.
        
        return –∏–º—è

//: –ö–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É.

            .lowercaseString

//: –ü–æ—Ç–æ–º –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –Ω–∞–±–æ—Ä –±—É–∫–≤.
            
            .characters
            
//: –ü—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞—Ç—å, —Ç–æ –µ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ `(0, "–í"), (1, "–∞"),` ...
            
            .enumerate()

//: –ó–∞—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –Ω–∞–∑–≤–∞—Ç—å —á–∏—Å–ª–æ `–∏–Ω–¥–µ–∫—Å`, –∞ –±—É–∫–≤—É `–±—É–∫–≤–∞`.
            
            .filter { –∏–Ω–¥–µ–∫—Å, –±—É–∫–≤–∞ in

//: –ò –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏—â–µ–º

                –±—É–∫–≤–∞ == –∏—Å–∫–æ–º–∞—è
            }

//: –ê –≤ –∫–æ–Ω—Ü–µ –≤–º–µ—Å—Ç–æ –ø–∞—Ä—ã –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –∏ –±—É–∫–≤—ã
            
            .map {–∏–Ω–¥–µ–∫—Å, –±—É–∫–≤–∞ in

//: –í–µ—Ä–Ω—É—Ç—å –≤—Å—é —Å—Ç—Ä–æ–∫—É –∏ –∏–Ω–¥–µ–∫—Å
                (–∏–º—è, –∏–Ω–¥–µ–∫—Å)
        }
        
    }
}

names
    .map(Robot("–∏"))
    .reduce([], combine: +)



//: –ò–∑ –¥–≤—É—Ö —Ä–æ–±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç –ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–æ–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –∏–ª–∏ –æ–¥–Ω—É –∏–ª–∏ –¥—Ä—É–≥—É—é.

typealias RobotType = (String -> [(String, Int)])

func +(a: RobotType, b: RobotType) -> RobotType {
    func ab(x: String) -> [(String, Int)] {
        return a(x) + b(x)
    }
    return ab
}


//: ## MapReduce

//: –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞, –Ω–∞–¥–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–æ–±–æ—Ç–∞ –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞, –∞ –∑–∞—Ç–µ–º —Å–æ–±—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ñ—É–Ω–∫—Ü–∏–µ–π `.join`.

[].join(names.map(Robot("–∞")))


//: –û–ø–µ—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–æ–±—â–µ–Ω–Ω–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è `.reduce` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `.join` - —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–µ–Ω–∏—è)

names.map(Robot("–ª")).reduce([], combine: +)

//: –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ, —á—Ç–æ names —Å–æ–¥–µ—Ä–∂–∏—Ç 1 000 000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏ —Ä–æ–±–æ—Ç ‚Äì –ø—Ä–æ–≥—Ä–∞–º–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ 1 000 000 –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤. –ü–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –æ–Ω–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é reduce. –ü–æ–ª—É—á–∞–µ—Ç—Å—è [MapReduce](https://en.wikipedia.org/wiki/MapReduce)!


//: ## –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è

//: –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã, –æ—Å—Ç–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —á–µ–º –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, –º–µ—Å—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —Å–∏–º–≤–æ–ª–∞ —Å—Ç—Ä–µ–ª–∫–∏.

func –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å(–∏–º—è: String, –∏–Ω–¥–µ–∫—Å:Int) -> String {
//: –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ, –∫—É–¥–∞ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–µ–ª–∫—É, –Ω—É–∂–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è `advance`.
    let –≥–¥–µ = advance(–∏–º—è.startIndex, –∏–Ω–¥–µ–∫—Å)
    return –∏–º—è[–∏–º—è.startIndex..<–≥–¥–µ] + "‚ûú" + –∏–º—è[–≥–¥–µ..<–∏–º—è.endIndex]
}

//: –ö–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: map, reduce, –≤—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

func –ü–æ–∏—Å–∫(–±—É–∫–≤–∞: Character) -> String {
    let —Ä–µ–∑—É–ª—å—Ç–∞—Ç_–∏–∑_—Å–∫–æ–±–æ–∫ = names.map(Robot(–±—É–∫–≤–∞)).reduce([], combine: +)
    let —Ä–µ–∑—É–ª—å—Ç–∞—Ç_–∏–∑_—Å—Ç—Ä–æ–∫ = —Ä–µ–∑—É–ª—å—Ç–∞—Ç_–∏–∑_—Å–∫–æ–±–æ–∫.map (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å)

//: –ö–∞–∫ –∏ –≤ –±–æ–ª—å—à–∏—Å—Ç–≤–µ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤ Swift `\n` –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É:
    return "\n".join(—Ä–µ–∑—É–ª—å—Ç–∞—Ç_–∏–∑_—Å—Ç—Ä–æ–∫) 
}

//: –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã
–ü–æ–∏—Å–∫("–∏")


//: [–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: –í–µ–∫—Ç–æ—Ä—ã](@next)


